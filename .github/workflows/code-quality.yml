name: Code Quality Checks

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Check for trailing whitespace
      id: trailing_whitespace
      continue-on-error: true
      run: |
        # Check for trailing whitespace in source files
        echo "## Trailing Whitespace Check" >> $GITHUB_STEP_SUMMARY
        if grep -rn --include="*.c" --include="*.h" --include="*.s" --include="*.S" '[[:space:]]$' main/ > /tmp/trailing_whitespace.txt 2>&1; then
          echo "Error: Trailing whitespace found in source files"
          cat /tmp/trailing_whitespace.txt
          echo "TRAILING_WS_FAILED=true" >> $GITHUB_ENV
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/trailing_whitespace.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "No trailing whitespace found"
          echo "✅ No trailing whitespace found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Check file encodings
      id: file_encodings
      continue-on-error: true
      run: |
        # Ensure all source files are UTF-8
        echo "## File Encoding Check" >> $GITHUB_STEP_SUMMARY
        if find main/ -type f \( -name "*.c" -o -name "*.h" \) -exec file {} \; | grep -v "UTF-8\|ASCII" > /tmp/encoding_issues.txt; then
          echo "Error: Files with incorrect encoding found"
          cat /tmp/encoding_issues.txt
          echo "ENCODING_FAILED=true" >> $GITHUB_ENV
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/encoding_issues.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "All files are UTF-8 or ASCII"
          echo "✅ All files are UTF-8 or ASCII" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Check for common security issues
      id: security_issues
      continue-on-error: true
      run: |
        echo "Checking for common security issues..."
        echo "## Security Issues Check" >> $GITHUB_STEP_SUMMARY
        SECURITY_FAILED=false
        
        # Check for hardcoded credentials (excluding example files)
        if grep -rn --include="*.c" --include="*.h" --exclude="*example*" -E '(password|passwd|pwd|secret|token|api_key).*=.*"[^"]{3,}"' main/ > /tmp/credentials.txt 2>&1; then
          echo "Warning: Possible hardcoded credentials found"
          cat /tmp/credentials.txt
          echo "SECURITY_FAILED=true" >> $GITHUB_ENV
          SECURITY_FAILED=true
          echo "⚠️ Possible hardcoded credentials found:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/credentials.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for unsafe functions
        if grep -rn --include="*.c" -E '\b(gets|strcpy|strcat|sprintf|vsprintf)\(' main/ > /tmp/unsafe_funcs.txt 2>&1; then
          echo "Warning: Unsafe C functions found. Consider using safer alternatives:"
          echo "  - gets() -> fgets()"
          echo "  - strcpy() -> strncpy() or strlcpy()"
          echo "  - strcat() -> strncat() or strlcat()"
          echo "  - sprintf() -> snprintf()"
          echo "  - vsprintf() -> vsnprintf()"
          cat /tmp/unsafe_funcs.txt
          echo "SECURITY_FAILED=true" >> $GITHUB_ENV
          SECURITY_FAILED=true
          echo "⚠️ Unsafe C functions found:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          cat /tmp/unsafe_funcs.txt >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Consider using safer alternatives:" >> $GITHUB_STEP_SUMMARY
          echo "- gets() -> fgets()" >> $GITHUB_STEP_SUMMARY
          echo "- strcpy() -> strncpy() or strlcpy()" >> $GITHUB_STEP_SUMMARY
          echo "- strcat() -> strncat() or strlcat()" >> $GITHUB_STEP_SUMMARY
          echo "- sprintf() -> snprintf()" >> $GITHUB_STEP_SUMMARY
          echo "- vsprintf() -> vsnprintf()" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Check for TODO/FIXME comments
        echo "Checking for TODO/FIXME comments..."
        if ! grep -rn --include="*.c" --include="*.h" -E '(TODO|FIXME|XXX|HACK)' main/ > /tmp/todo_comments.txt 2>&1; then
          echo "No TODO/FIXME comments found"
          echo "✅ No TODO/FIXME comments found" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "$SECURITY_FAILED" = "true" ]; then
          exit 1
        fi
    
    - name: Check code structure
      id: code_structure
      continue-on-error: true
      run: |
        echo "Analyzing code structure..."
        echo "## Code Structure Check" >> $GITHUB_STEP_SUMMARY
        
        # Count lines of code
        echo "Lines of code:"
        find main/ -name "*.c" -exec wc -l {} + | tail -1
        
        # Check for overly long functions (simple heuristic)
        echo "Checking for long functions (>200 lines)..."
        LONG_FUNCS_FOUND=false
        for file in main/*.c; do
          if awk '/^[a-zA-Z_].*\(.*\)/ {start=NR; fname=$0} /^}/ && start {if (NR-start > 200) print FILENAME":"start": Function too long ("NR-start" lines): "fname; start=0}' "$file" > /tmp/long_funcs_${file##*/}.txt 2>&1; then
            if [ -s /tmp/long_funcs_${file##*/}.txt ]; then
              cat /tmp/long_funcs_${file##*/}.txt
              LONG_FUNCS_FOUND=true
            fi
          fi
        done
        
        if [ "$LONG_FUNCS_FOUND" = "true" ]; then
          echo "STRUCTURE_FAILED=true" >> $GITHUB_ENV
          echo "⚠️ Long functions found (>200 lines)" >> $GITHUB_STEP_SUMMARY
          exit 1
        else
          echo "No excessively long functions found"
          echo "✅ No excessively long functions found" >> $GITHUB_STEP_SUMMARY
        fi
    
    - name: Create issue on failure
      if: failure() && github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Prepare issue body
          let issueBody = `## Code Quality Check Failed\n\n`;
          issueBody += `The code quality checks failed for PR #${{ github.event.pull_request.number }}.\n\n`;
          issueBody += `**Pull Request:** ${{ github.event.pull_request.html_url }}\n`;
          issueBody += `**Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n`;
          issueBody += `### Issues Found:\n\n`;
          
          // Check which tests failed
          const trailingWsFailed = process.env.TRAILING_WS_FAILED === 'true';
          const encodingFailed = process.env.ENCODING_FAILED === 'true';
          const securityFailed = process.env.SECURITY_FAILED === 'true';
          const structureFailed = process.env.STRUCTURE_FAILED === 'true';
          
          if (trailingWsFailed) {
            issueBody += `#### ❌ Trailing Whitespace\n\n`;
            issueBody += `Trailing whitespace was found in source files. This needs to be removed.\n\n`;
            try {
              const whitespaceDetails = fs.readFileSync('/tmp/trailing_whitespace.txt', 'utf8');
              issueBody += `<details>\n<summary>Files with trailing whitespace</summary>\n\n\`\`\`\n${whitespaceDetails}\n\`\`\`\n</details>\n\n`;
            } catch (e) {
              issueBody += `See the workflow run for details.\n\n`;
            }
            issueBody += `**Fix:** Remove trailing whitespace from the files listed above.\n\n`;
          }
          
          if (encodingFailed) {
            issueBody += `#### ❌ File Encoding Issues\n\n`;
            issueBody += `Some files are not using UTF-8 or ASCII encoding.\n\n`;
            try {
              const encodingDetails = fs.readFileSync('/tmp/encoding_issues.txt', 'utf8');
              issueBody += `<details>\n<summary>Files with encoding issues</summary>\n\n\`\`\`\n${encodingDetails}\n\`\`\`\n</details>\n\n`;
            } catch (e) {
              issueBody += `See the workflow run for details.\n\n`;
            }
            issueBody += `**Fix:** Convert files to UTF-8 encoding.\n\n`;
          }
          
          if (securityFailed) {
            issueBody += `#### ⚠️ Security Issues\n\n`;
            try {
              const credsExists = fs.existsSync('/tmp/credentials.txt');
              if (credsExists) {
                const credsDetails = fs.readFileSync('/tmp/credentials.txt', 'utf8');
                issueBody += `**Possible hardcoded credentials found:**\n\`\`\`\n${credsDetails}\n\`\`\`\n\n`;
              }
            } catch (e) {}
            
            try {
              const unsafeExists = fs.existsSync('/tmp/unsafe_funcs.txt');
              if (unsafeExists) {
                const unsafeDetails = fs.readFileSync('/tmp/unsafe_funcs.txt', 'utf8');
                issueBody += `**Unsafe C functions found:**\n\`\`\`\n${unsafeDetails}\n\`\`\`\n\n`;
                issueBody += `**Recommended alternatives:**\n`;
                issueBody += `- \`gets()\` → \`fgets()\`\n`;
                issueBody += `- \`strcpy()\` → \`strncpy()\` or \`strlcpy()\`\n`;
                issueBody += `- \`strcat()\` → \`strncat()\` or \`strlcat()\`\n`;
                issueBody += `- \`sprintf()\` → \`snprintf()\`\n`;
                issueBody += `- \`vsprintf()\` → \`vsnprintf()\`\n\n`;
              }
            } catch (e) {}
          }
          
          if (structureFailed) {
            issueBody += `#### ⚠️ Code Structure Issues\n\n`;
            issueBody += `Functions longer than 200 lines were found. Consider refactoring for better maintainability.\n\n`;
          }
          
          issueBody += `---\n\n`;
          issueBody += `@github/copilot Please review and provide a fix for these code quality issues.\n\n`;
          issueBody += `**Note:** This issue was automatically created by the Code Quality workflow.`;
          
          // Create the issue
          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Code Quality Issues in PR #${{ github.event.pull_request.number }}`,
            body: issueBody,
            labels: ['🤖 automated', '🔒 security']
          });
          
          console.log(`Created issue #${issue.data.number}`);
          
          // Add a comment to the PR
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: ${{ github.event.pull_request.number }},
            body: `❌ Code quality checks failed. Issue #${issue.data.number} has been created with details on what needs to be fixed.`
          });
