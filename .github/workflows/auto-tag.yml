name: Auto Tag Firmware Releases

on:
  push:
    branches:
      - main
      - develop
      - release
    paths:
      - 'main/**'
      - 'CMakeLists.txt'
      - 'VERSION'
  pull_request:
    branches:
      - main
      - develop
    types: [opened, synchronize, reopened]
    paths:
      - 'main/**'
      - 'CMakeLists.txt'
      - 'VERSION'

permissions:
  contents: write

jobs:
  auto-tag:
    name: Auto-tag firmware release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}

      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Auto-create tag from VERSION file
        if: github.event_name == 'push'
        run: |
          # Check if VERSION file exists
          if [ ! -f "VERSION" ]; then
            echo "VERSION file not found, skipping auto-tag"
            exit 0
          fi
          
          VERSION=$(cat VERSION | tr -d '\n\r ')
          
          if [ -z "$VERSION" ]; then
            echo "VERSION file is empty, skipping auto-tag"
            exit 0
          fi
          
          # Validate version follows semantic versioning pattern (X.Y.Z)
          if ! [[ "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "VERSION file does not follow semantic versioning pattern (X.Y.Z): $VERSION"
            exit 1
          fi
          
          # Determine version suffix and variant logic based on branch
          BRANCH_NAME="${{ github.ref_name }}"
          TAG_PREFIX="v$VERSION"
          
          if [[ "$BRANCH_NAME" == "release" ]]; then
            # Priority 1: Release branch - stable releases (v1.0.0)
            TAG_NAME="v$VERSION"
            echo "Branch is release, creating stable release tag"
          elif [[ "$BRANCH_NAME" == "main" ]]; then
            # Priority 2: Main branch - release candidates (v1.0.0-rc.1, v1.0.0-rc.2, ...)
            echo "Branch is main, creating release candidate tag"
            
            # Find the highest rc variant for this version
            HIGHEST_RC=0
            while IFS= read -r tag; do
              # Only process tags that match the expected format exactly
              if [[ "$tag" =~ ^${TAG_PREFIX}-rc\.[0-9]+$ ]]; then
                # Extract number after -rc. using parameter expansion
                RC_PART="${tag##*-rc.}"
                if [[ "$RC_PART" =~ ^[0-9]+$ ]] && [[ "$RC_PART" -gt "$HIGHEST_RC" ]]; then
                  HIGHEST_RC=$RC_PART
                fi
              fi
            done < <(git tag -l "${TAG_PREFIX}-rc.*" 2>/dev/null)
            
            NEXT_RC=$((HIGHEST_RC + 1))
            TAG_NAME="${TAG_PREFIX}-rc.${NEXT_RC}"
          elif [[ "$BRANCH_NAME" == "develop" ]]; then
            # Priority 3: Develop branch - alpha variants (v1.0.0-alpha.1, v1.0.0-alpha.2, ...)
            echo "Branch is develop, creating alpha variant tag"
            
            # Find the highest alpha variant for this version
            HIGHEST_ALPHA=0
            while IFS= read -r tag; do
              # Only process tags that match the expected format exactly
              if [[ "$tag" =~ ^${TAG_PREFIX}-alpha\.[0-9]+$ ]]; then
                # Extract number after -alpha. using parameter expansion
                ALPHA_PART="${tag##*-alpha.}"
                if [[ "$ALPHA_PART" =~ ^[0-9]+$ ]] && [[ "$ALPHA_PART" -gt "$HIGHEST_ALPHA" ]]; then
                  HIGHEST_ALPHA=$ALPHA_PART
                fi
              fi
            done < <(git tag -l "${TAG_PREFIX}-alpha.*" 2>/dev/null)
            
            NEXT_ALPHA=$((HIGHEST_ALPHA + 1))
            TAG_NAME="${TAG_PREFIX}-alpha.${NEXT_ALPHA}"
          else
            echo "Branch $BRANCH_NAME does not match tagging criteria, skipping"
            exit 0
          fi
          
          # Check if tag already exists
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists, skipping"
            exit 0
          fi
          
          # Check if VERSION file was changed in this push
          if git diff --quiet ${{ github.event.before }} ${{ github.sha }} -- VERSION; then
            echo "VERSION file not changed, skipping auto-tag"
            exit 0
          fi
          
          echo "Creating tag $TAG_NAME for firmware version"
          git tag -a "$TAG_NAME" -m "ESP32 Solo Miner firmware $TAG_NAME"
          git push origin "$TAG_NAME"
          echo "Tag $TAG_NAME created and pushed successfully"
